class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        """
        n对括号，总共有2n个单括号,返回所有有可能的括号组合 
        思路：使用集合来存储最后的括号组合，利用栈的特性来决定括号是不是配对的
        第一个和最后一个括号是固定的，一定一个是左括号，一个是右括号。
        因此当n=1时，括号的排列组合数时固定的，就一种。
        
        第一个入栈的是⬅️括号，接下来如果有右括号的，就出栈。如果还是左括号的，继续入栈。
        
        问题在于，怎么确定括号的可能性呢？怎么样才能遍历出来或者生成出所有种可能性呢？难道需要要递归来遍历所有的情况。
        
        使用动态规划，知道第i种排列的可能性，就知道第n种排列的可能性。
        第i种排列的可能性=（ 【p排列的可能性】）【q排列的可能性】p = (0,i-1)，q = (i-1, 0) 也就是p+q = i-1
        """
        dp = [ [] for _ in range(n+1)]
        dp[0] = [""]
        for i in range(1,n+1):
            for j in range(i):
                l1 = dp[j]
                l2 = dp[i-j-1]
                for p in l1:
                    for q in l2:
                        dp[i].append("({0}){1}".format(p,q))
        return dp[n]
                
            
        
        
        